# -*- coding: utf-8 -*-
"""AI-MINOR-MAY

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Avp3Tsz74Q4nL0RICGlOJGm5MUJ_wThk
"""

import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt

df = pd.read_csv('/content/archive.zip')
df.info()

df.head()

df.dtypes

df.describe

df.shape

df.columns

df['gender'].value_counts()

df.isnull()

df.isnull().sum()

df.rename(columns={"race/ethnicity":"race_ethnicity",
                   "parental level of education":"education_level",
                   "test preparation course":"prep_course",
                   "math score":"math_score",
                   "reading score":"reading_score",
                   "writing score":"writing_score"})

df

df.describe()

df['parental level of education'].value_counts()

df['race/ethnicity'].value_counts()

df['lunch'].value_counts()

df['test preparation course'].value_counts()

df['total']=df['math score']+df['reading score']+df['writing score']
df['average']=df['total']/3
sns.distplot(df['math score'])



sns.distplot(df['reading score'])

sns.distplot(df['writing score'])

sns.heatmap(df.corr())

df.groupby(["test preparation course"]).mean().plot.bar()
plt.show()

df.groupby(["gender"]).mean().plot.bar()
plt.show()

df.groupby(["lunch"]).mean().plot.bar()
plt.show()

df.groupby(["race/ethnicity"]).mean().plot.bar()
plt.show()

df=df.drop(['race/ethnicity','parental level of education','lunch'], axis=1)
df

corre=df.corr() 
corre

from sklearn.ensemble import RandomForestClassifier

from sklearn.svm import SVC
svm = SVC()
rfc = RandomForestClassifier()
df.columns

X = df[[  'math score',
       'reading score', 'writing score','total','average',]].values
Y = df[['gender']].values

from sklearn.preprocessing import MinMaxScaler
normalized_data = MinMaxScaler().fit_transform(X)
from sklearn.model_selection import train_test_split
X_train, X_test, Y_train, Y_test = train_test_split(normalized_data, Y, train_size=0.75)
svm.fit(X_train, Y_train)

rfc.fit(X_train, Y_train)

Y_pred_rfc = rfc.predict(X_test)
Y_pred_svm = svm.predict(X_test)

from sklearn.metrics import accuracy_score

accuracy_score(Y_test, Y_pred_svm)

accuracy_score(Y_test, Y_pred_rfc)